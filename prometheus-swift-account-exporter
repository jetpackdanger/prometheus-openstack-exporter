#!/usr/bin/env python
"""
OpenStack Swift account exporter for the prometheus monitoring system

Copyright (C) 2016-2019 Canonical, Ltd.
Authors:
  Jacek Nykis <jacek.nykis@canonical.com>
  Laurent Sesques <laurent.sesques@canonical.com>
  Paul Collins <paul.collins@canonical.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3,
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranties of
MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import argparse
import yaml
from os import path
import traceback
import urlparse
import requests
from BaseHTTPServer import BaseHTTPRequestHandler
from BaseHTTPServer import HTTPServer
from SocketServer import ForkingMixIn
from prometheus_client import CollectorRegistry, generate_latest, Gauge, CONTENT_TYPE_LATEST

import random
import swift.common.utils

from swift.common.ring import ring

import logging
import logging.handlers

log = logging.getLogger('psae-logger')


class Swift():
    def __init__(self):
        self.registry = CollectorRegistry()

        self.hash_path_prefix = config.get('hash_path_prefix', None)
        if self.hash_path_prefix:
            swift.common.utils.HASH_PATH_PREFIX = self.hash_path_prefix
        self.hash_path_suffix = config.get('hash_path_suffix', None)
        if self.hash_path_suffix:
            swift.common.utils.HASH_PATH_SUFFIX = self.hash_path_suffix

        self.reseller_prefix = config['reseller_prefix']
        self.ring_path = config['ring_path']

        self.account_ring = self._get_account_ring()

    def _read_keystone_tenants_map(self, map_path):
        m = {}
        with open(map_path) as km:
            line = km.readline()
            while line != '':
                name, id = line.strip().split()
                m[name] = id
                line = km.readline()

        return m

    def _get_account_ring(self):
        """Read the account ring from the configured location, and return it."""
        return ring.Ring(
            serialized_path=self.ring_path,
            ring_name='account',
            )

    def _get_account_usage(self, account):
        partition, nodes = self.account_ring.get_nodes(account=account)
        node = random.choice(nodes)
        account_url = 'http://{ip}:{port}/{device}/{partition}/{account}'.format(
            account=account,
            partition=partition,
            **node)
        response = requests.head(account_url)
        if response.status_code == 204:
            return int(response.headers['X-Account-Bytes-Used'])
        else:
            return 0

    def gen_account_stats(self):
        self.keystone_tenants_map = self._read_keystone_tenants_map(
            config['keystone_tenants_map'])
        labels = ['cloud', 'swift_account', 'keystone_tenant_name', 'keystone_tenant_id']
        swift_account = Gauge(
            'swift_account_bytes_used', 'Swift account usage in bytes', labels, registry=self.registry)
        for tenant_name, tenant_id in self.keystone_tenants_map.iteritems():
            account = self.reseller_prefix + tenant_id
            bytes_used = self._get_account_usage(account)

            swift_account.labels(config['cloud'], account, tenant_name, tenant_id).set(bytes_used)

    def get_stats(self):
        self.gen_account_stats()
        return generate_latest(self.registry)


class ForkingHTTPServer(ForkingMixIn, HTTPServer):
    pass


class OpenstackSwiftAccountExporterHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        BaseHTTPRequestHandler.__init__(self, *args, **kwargs)

    def do_GET(self):
        url = urlparse.urlparse(self.path)
        if url.path == '/metrics':
            try:
                swift = Swift()
                log.debug("Collecting stats..")
                output = swift.get_stats()
                self.send_response(200)
                self.send_header('Content-Type', CONTENT_TYPE_LATEST)
                self.end_headers()
                self.wfile.write(output)
            except:  # noqa: E722
                self.send_response(500)
                self.end_headers()
                self.wfile.write(traceback.format_exc())
        elif url.path == '/':
            self.send_response(200)
            self.end_headers()
            self.wfile.write("""<html>
            <head><title>OpenStack Swift Account Exporter</title></head>
            <body>
            <h1>OpenStack Swift Account Exporter</h1>
            <p>Visit <code>/metrics</code> to use.</p>
            </body>
            </html>""")
        else:
            self.send_response(404)
            self.end_headers()


def handler(*args, **kwargs):
    OpenstackSwiftAccountExporterHandler(*args, **kwargs)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage=__doc__,
                                     description='Prometheus OpenStack Swift account exporter',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('config_file', nargs='?',
                        help='Configuration file path',
                        default='/etc/prometheus/prometheus-swift-account-exporter.yaml',
                        type=argparse.FileType('r'))
    args = parser.parse_args()
    log.setLevel(logging.DEBUG)
    for logsock in ('/dev/log', '/var/run/syslog'):
        if path.exists(logsock):
            log.addHandler(logging.handlers.SysLogHandler(address=logsock))
    else:
        log.addHandler(logging.StreamHandler())
    config = yaml.safe_load(args.config_file.read())
    server = ForkingHTTPServer(('', config.get('listen_port')), handler)
    server.serve_forever()
